# Nginx配置示例 - 配合完整性检查器使用
# 此配置展示了如何在不触发完整性检查器的情况下配置nginx

server {
    listen 80;
    server_name your-domain.com;
    
    # 根目录
    root /var/www/html;
    index index.html;
    
    # 安全头设置
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # 完整性检查器相关配置
    # 注意：不要使用sub_filter，因为它会被完整性检查器检测到
    # sub_filter "Happy TTS" "Modified TTS";  # ❌ 不要这样做
    
    # 正确的做法：使用自定义头来传递信息
    add_header X-Integrity-Check "enabled" always;
    add_header X-Content-Version "1.0" always;
    
    # 代理头设置（完整性检查器会检测这些）
    # 如果必须使用代理，请确保完整性检查器能够正确处理
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    
    # 静态文件处理
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        
        # 为完整性检查器添加特殊头
        add_header X-Integrity-Protected "true" always;
    }
    
    # API路由
    location /api/ {
        # 代理到后端服务
        proxy_pass http://backend:3000;
        
        # 确保不修改响应内容
        proxy_buffering off;
        proxy_request_buffering off;
        
        # 添加完整性检查器需要的头
        add_header X-API-Integrity "verified" always;
    }
    
    # 完整性检查器测试端点
    location /api/proxy-test {
        # 返回代理检测信息
        add_header Content-Type "application/json";
        add_header X-Integrity-Test "proxy-detection";
        
        # 返回当前代理配置信息
        return 200 '{"proxy_detected": false, "integrity_enabled": true}';
    }
    
    # 响应时间测试端点
    location /api/timing-test {
        # 快速响应，用于检测代理延迟
        add_header Content-Type "application/json";
        return 200 '{"timestamp": "$time_iso8601", "response_time": "fast"}';
    }
    
    # 主页面
    location / {
        try_files $uri $uri/ /index.html;
        
        # 为HTML文件添加完整性检查头
        location ~* \.html$ {
            add_header X-Content-Integrity "protected" always;
            add_header X-Integrity-Version "2.0" always;
        }
    }
    
    # 安全配置
    location ~ /\. {
        deny all;
    }
    
    # 错误页面
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    # 完整性检查器错误处理
    location = /integrity-error {
        add_header Content-Type "application/json";
        return 200 '{"error": "integrity_violation", "message": "Content integrity check failed"}';
    }
}

# 上游后端服务配置
upstream backend {
    server 127.0.0.1:3000;
    # 可以添加多个后端服务器
    # server 127.0.0.1:3001;
    # server 127.0.0.1:3002;
}

# 完整性检查器监控配置
# 用于监控nginx日志中的完整性检查事件
log_format integrity_log '$remote_addr - $remote_user [$time_local] '
                        '"$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent" '
                        'integrity_check="$http_x_integrity_check" '
                        'content_version="$http_x_content_version"';

access_log /var/log/nginx/integrity_access.log integrity_log;

# 安全配置
# 防止常见的攻击向量
location ~* \.(php|asp|aspx|jsp|cgi)$ {
    deny all;
}

# 限制请求大小
client_max_body_size 10M;

# 超时设置
client_body_timeout 12;
client_header_timeout 12;
send_timeout 10;

# 压缩配置
gzip on;
gzip_vary on;
gzip_min_length 1024;
gzip_types
    text/plain
    text/css
    text/xml
    text/javascript
    application/javascript
    application/xml+rss
    application/json;

# 缓存配置
location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
    expires 1y;
    add_header Cache-Control "public, immutable";
    add_header X-Integrity-Cached "true" always;
}

# 完整性检查器健康检查
location /health {
    access_log off;
    add_header Content-Type "application/json";
    return 200 '{"status": "healthy", "integrity_checker": "active", "timestamp": "$time_iso8601"}';
} 